function RMSE(iteration)
load('LSE.mat');
load('est_state.mat')
load('lpf_state.mat')
load('KFpredict_state.mat')
load('DiagQ_est_state.mat')
load('AdaptiveQ_est_state.mat')

n_variance = [0.01; 0.1; 1; 10; 100];
gammamax=size(AdaptiveQ_est_state.var001,4);
% iteration = 1e5;
num_sample = 11;
mse = zeros(length(n_variance),1);
lpf_mse_buf = zeros(length(n_variance),9);
KFpredict_buf = zeros(length(n_variance),9);
KF_mse = zeros(length(n_variance),1);
KF_mseQdiag = zeros(length(n_variance),1);
KF_mseQ_buf = zeros(length(n_variance),gammamax);

for iter = 1:iteration
    for num = 1:num_sample
        exactPos = [num-1;num-1];
        mse = mse + [...
            norm(LSE.var001(:,iter,num)-exactPos);...
            norm(LSE.var01(:,iter,num)-exactPos);...
            norm(LSE.var1(:,iter,num)-exactPos);...
            norm(LSE.var10(:,iter,num)-exactPos);...
            norm(LSE.var100(:,iter,num)-exactPos)...
            ];
        for a = 1:9
            lpf_mse_buf(:,a) = lpf_mse_buf(:,a) + [...
                norm(lpf_state.var001(:,iter,num,a)-exactPos);...
                norm(lpf_state.var01(:,iter,num,a)-exactPos);...
                norm(lpf_state.var1(:,iter,num,a)-exactPos);...
                norm(lpf_state.var10(:,iter,num,a)-exactPos);...
                norm(lpf_state.var100(:,iter,num,a)-exactPos)...
                ];
        end

        for a = 1:9
            KFpredict_buf(:,a) = KFpredict_buf(:,a) + [...
                norm(KFpredict_state.var001(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var01(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var1(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var10(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var100(:,iter,num,a)-exactPos)...
                ];
        end

        KF_mse = KF_mse + [...
            norm(est_state.var001(:,iter,num)-exactPos);...
            norm(est_state.var01(:,iter,num)-exactPos);...
            norm(est_state.var1(:,iter,num)-exactPos);...
            norm(est_state.var10(:,iter,num)-exactPos);...
            norm(est_state.var100(:,iter,num)-exactPos)...
            ];

        KF_mseQdiag = KF_mseQdiag + [...
            norm(DiagQ_est_state.var001(:,iter,num)-exactPos);...
            norm(DiagQ_est_state.var01(:,iter,num)-exactPos);...
            norm(DiagQ_est_state.var1(:,iter,num)-exactPos);...
            norm(DiagQ_est_state.var10(:,iter,num)-exactPos);...
            norm(DiagQ_est_state.var100(:,iter,num)-exactPos)...
            ];

        for g=1:gammamax
            KF_mseQ_buf(:,g) = KF_mseQ_buf(:,g) + [...
                norm(AdaptiveQ_est_state.var001(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var01(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var1(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var10(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var100(:,iter,num,g)-exactPos)...
                ];
        end
    end
end
mse = mse./(iteration * num_sample);
[lpf_mse_min,optimal_alpha] = min(lpf_mse_buf,[],2);
[KFpredict_min,optimal_alpha_predict] = min(KFpredict_buf,[],2);
lpf_mse = lpf_mse_min./(iteration * num_sample);
KFpredict_mse = KFpredict_min./(iteration * num_sample);
KF_mse = KF_mse./(iteration * num_sample);
KF_mseQdiag = KF_mseQdiag./(iteration * num_sample);
[KF_mseQ_min,optimal_gamma] = min(KF_mseQ_buf,[],2);
KF_mseQ = KF_mseQ_min./(iteration * num_sample);

figure;
semilogx(n_variance, mse, '-o', 'LineWidth', 1, 'DisplayName', 'ToA');
hold on
semilogx(n_variance, lpf_mse, '-s', 'LineWidth', 1, 'DisplayName', 'LPF+ToA');
semilogx(n_variance, KFpredict_mse, '-^', 'LineWidth', 1, 'DisplayName', 'KF_p_r_e_d+LPF');
semilogx(n_variance, KF_mse, '-d', 'LineWidth', 1, 'DisplayName', 'KF');
semilogx(n_variance, KF_mseQdiag, '-p', 'LineWidth', 1, 'DisplayName', 'KF_Q_D_i_a_g');
semilogx(n_variance, KF_mseQ, '-h', 'LineWidth', 1, 'DisplayName', 'KF_Q_e_x_p');
hold off
legend;
title('err according to measurement noise');
xlabel('variance');
ylabel('err');
grid on
disp('optimal alpha: ');
disp(optimal_alpha/10);
disp('optimal alpha_predict: ');
disp(optimal_alpha_predict/10);
disp('optimal gamma: ');
disp(6e-2+(optimal_gamma-1)*1e-2);
disp(optimal_gamma);
end