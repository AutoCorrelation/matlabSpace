function RMSE(iteration)
load("LSE.mat");
load("est_state.mat")
load("lpf_state.mat")
load("KFpredict_state.mat")
load("AdaptiveR_est_state.mat")
load("AdaptiveQ_est_state.mat")

n_variance = [0.01; 0.1; 1; 10; 100];
gammamax=size(AdaptiveQ_est_state.var001,4);
% iteration = 1e5;
num_sample = 11;
mse = zeros(length(n_variance),1);
lpf_mse_buf = zeros(length(n_variance),9);
KFpredict_buf = zeros(length(n_variance),9);
KF_mse = zeros(length(n_variance),1);
KF_mseR = zeros(length(n_variance),1);
KF_mseQ_buf = zeros(length(n_variance),gammamax);

for iter = 1:iteration
    for num = 1:num_sample
        exactPos = [num-1;num-1];
        mse = mse + [...
            norm(LSE.var001(:,iter,num)-exactPos);...
            norm(LSE.var01(:,iter,num)-exactPos);...
            norm(LSE.var1(:,iter,num)-exactPos);...
            norm(LSE.var10(:,iter,num)-exactPos);...
            norm(LSE.var100(:,iter,num)-exactPos)...
            ];
        for a = 1:9
            lpf_mse_buf(:,a) = lpf_mse_buf(:,a) + [...
                norm(lpf_state.var001(:,iter,num,a)-exactPos);...
                norm(lpf_state.var01(:,iter,num,a)-exactPos);...
                norm(lpf_state.var1(:,iter,num,a)-exactPos);...
                norm(lpf_state.var10(:,iter,num,a)-exactPos);...
                norm(lpf_state.var100(:,iter,num,a)-exactPos)...
                ];
        end

        for a = 1:9
            KFpredict_buf(:,a) = KFpredict_buf(:,a) + [...
                norm(KFpredict_state.var001(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var01(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var1(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var10(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var100(:,iter,num,a)-exactPos)...
                ];
        end

        KF_mse = KF_mse + [...
            norm(est_state.var001(:,iter,num)-exactPos);...
            norm(est_state.var01(:,iter,num)-exactPos);...
            norm(est_state.var1(:,iter,num)-exactPos);...
            norm(est_state.var10(:,iter,num)-exactPos);...
            norm(est_state.var100(:,iter,num)-exactPos)...
            ];
        KF_mseR = KF_mseR + [...
            norm(AdaptiveR_est_state.var001(:,iter,num)-exactPos);...
            norm(AdaptiveR_est_state.var01(:,iter,num)-exactPos);...
            norm(AdaptiveR_est_state.var1(:,iter,num)-exactPos);...
            norm(AdaptiveR_est_state.var10(:,iter,num)-exactPos);...
            norm(AdaptiveR_est_state.var100(:,iter,num)-exactPos)...
            ];

        for g=1:gammamax
            KF_mseQ_buf(:,g) = KF_mseQ_buf(:,g) + [...
                norm(AdaptiveQ_est_state.var001(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var01(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var1(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var10(:,iter,num,g)-exactPos);...
                norm(AdaptiveQ_est_state.var100(:,iter,num,g)-exactPos)...
                ];
        end
    end
end
mse = mse./(iteration * num_sample);
[lpf_mse_min,optimal_alpha] = min(lpf_mse_buf,[],2);
[KFpredict_min,optimal_alpha_predict] = min(KFpredict_buf,[],2);
lpf_mse = lpf_mse_min./(iteration * num_sample);
KFpredict_mse = KFpredict_min./(iteration * num_sample);
KF_mse = KF_mse./(iteration * num_sample);
KF_mseR = KF_mseR./(iteration * num_sample);
[KF_mseQ_min,optimal_gamma] = min(KF_mseQ_buf,[],2);
KF_mseQ = KF_mseQ_min./(iteration * num_sample);

semilogx(n_variance,mse);
hold on
semilogx(n_variance,lpf_mse);
semilogx(n_variance,KFpredict_mse);
semilogx(n_variance,KF_mse);

semilogx(n_variance,KF_mseR);
semilogx(n_variance,KF_mseQ);
title("err according to measurement noise");
xlabel("variance");
ylabel("err");
legend("ToA","LPF+ToA","KF(predict)+ToA","KF+ToA","KF+ToA(R)","KF+ToA(Q)");
% legend("ToA","LPF+ToA","KF(predict)+ToA","KF+ToA","KF+ToA(R)");
grid on
disp("optimal alpha: "+optimal_alpha/10);
disp("optimal alpha_predict: "+optimal_alpha_predict/10);
disp("optimal gamma: "+optimal_gamma);

end