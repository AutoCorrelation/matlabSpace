function RMSE(iteration)
load("LSE.mat");
load("est_state.mat")
load("lpf_state.mat")
load("KFpredict_state.mat")
% load("EnhanceQ_est_state.mat")
load("stepR_est_state.mat")

% n_variance = [1e-2; 1e-1; 1e0; 1e1; 1e2];
n_variance = [0.01; 0.1; 1; 10; 100];

% iteration = 1e5;
num_sample = 11;
mse = zeros(length(n_variance),1);
lpf_mse_buf = zeros(length(n_variance),9);
KFpredict_buf = zeros(length(n_variance),9);
KF_mse = zeros(length(n_variance),1);
KF_mse2 = zeros(length(n_variance),1);
% KFenhanceQ_buf = zeros(length(n_variance),9);

for iter = 1:iteration
    for num = 1:num_sample
        exactPos = [num-1;num-1];
        mse = mse + [...
            norm(LSE.var001(:,iter,num)-exactPos);...
            norm(LSE.var01(:,iter,num)-exactPos);...
            norm(LSE.var1(:,iter,num)-exactPos);...
            norm(LSE.var10(:,iter,num)-exactPos);...
            norm(LSE.var100(:,iter,num)-exactPos)...
            ];
        for a = 1:9
            lpf_mse_buf(:,a) = lpf_mse_buf(:,a) + [...
                norm(lpf_state.var001(:,iter,num,a)-exactPos);...
                norm(lpf_state.var01(:,iter,num,a)-exactPos);...
                norm(lpf_state.var1(:,iter,num,a)-exactPos);...
                norm(lpf_state.var10(:,iter,num,a)-exactPos);...
                norm(lpf_state.var100(:,iter,num,a)-exactPos)...
                ];
        end
        
        for a = 1:9
            KFpredict_buf(:,a) = KFpredict_buf(:,a) + [...
                norm(KFpredict_state.var001(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var01(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var1(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var10(:,iter,num,a)-exactPos);...
                norm(KFpredict_state.var100(:,iter,num,a)-exactPos)...
                ];
        end
        
        KF_mse = KF_mse + [...
            norm(est_state.var001(:,iter,num)-exactPos);...
            norm(est_state.var01(:,iter,num)-exactPos);...
            norm(est_state.var1(:,iter,num)-exactPos);...
            norm(est_state.var10(:,iter,num)-exactPos);...
            norm(est_state.var100(:,iter,num)-exactPos)...
            ];
        KF_mse2 = KF_mse2 + [...
            norm(est_state.var001(:,iter,num)-exactPos);...
            norm(est_state.var01(:,iter,num)-exactPos);...
            norm(est_state.var1(:,iter,num)-exactPos);...
            norm(est_state.var10(:,iter,num)-exactPos);...
            norm(est_state.var100(:,iter,num)-exactPos)...
            ];
        
        % for a = 1:9
        %     KFenhanceQ_buf(:,a) = KFenhanceQ_buf(:,a) + [...
        %         norm(EnhanceQ_est_state.var001(:,iter,num,a)-exactPos);...
        %         norm(EnhanceQ_est_state.var01(:,iter,num,a)-exactPos);...
        %         norm(EnhanceQ_est_state.var1(:,iter,num,a)-exactPos);...
        %         norm(EnhanceQ_est_state.var10(:,iter,num,a)-exactPos);...
        %         norm(EnhanceQ_est_state.var100(:,iter,num,a)-exactPos)...
        %         ];
        % end
        
        
    end
end
mse = mse./(iteration * num_sample);
[lpf_mse_min,optimal_alpha] = min(lpf_mse_buf,[],2);
[KFpredict_min,optimal_alpha_predict] = min(KFpredict_buf,[],2);
lpf_mse = lpf_mse_min./(iteration * num_sample);
KFpredict_mse = KFpredict_min./(iteration * num_sample);
KF_mse = KF_mse./(iteration * num_sample);
KF_mse2 = KF_mse2./(iteration * num_sample);
% [KFenhanceQ_min,optimal_alpha_enhanceQ] = min(KFenhanceQ_buf,[],2);
% KFenhanceQ_mse = KFenhanceQ_min./(iteration * num_sample);

semilogx(n_variance,mse);
hold on
semilogx(n_variance,lpf_mse);
semilogx(n_variance,KFpredict_mse);
semilogx(n_variance,KF_mse);
% semilogx(n_variance,KFenhanceQ_mse);
semilogx(n_variance,KF_mse2);
title("err according to measurement noise");
xlabel("variance");
ylabel("err");
legend("ToA","LPF+ToA","KF(predict)+ToA","KF+ToA","EnhanceQ+KF+ToA");
grid on
disp("optimal alpha: "+optimal_alpha);
disp("optimal alpha_predict: "+optimal_alpha_predict);
% disp("optimal alpha_enhanceQ: "+optimal_alpha_enhanceQ);
end